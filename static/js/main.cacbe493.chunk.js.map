{"version":3,"sources":["Context/DataContext.js","Day/Day.js","Month/Month.js","Year/Year.js","Main/Main.js","Nav/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["dayNames","meses","DataContext","createContext","DataProvider","children","dt","Date","currentDay","getDay","getDate","month","getMonth","year","getFullYear","useState","selectedYear","selectedMonth","setSelectedMonth","selectedDate","setSelectedDate","display","setDisplay","paddingDays","daysInMonth","dayNumbers","Array","keys","lastDayOfPrevMonth","Provider","value","changeMonth","number","Day","props","useContext","selectedDay","hora","className","miniatura","Month","listOfDayNames","map","day","index","listOfDayNumbers","num","dia","onClick","Year","Main","mes","Nav","listMeses","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cacbe493.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\n// const dayNumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\r\n\r\nconst dayNames = ['DOMINGO', 'LUNES', 'MARTES', 'MIERCOLES', 'JUEVES',\r\n 'VIERNES', 'SABADO']\r\n\r\nconst meses = ['ENERO', 'FEBRERO', 'MARZO',\r\n 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO',\r\n 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];\r\n\r\nconst DataContext = createContext({});\r\n\r\nconst DataProvider = ({children}) => {\r\n\r\n  const dt = new Date();\r\n  const day = dt.getDay(); // indice de dia semanal  dom => 0\r\n  const currentDay = dt.getDate(); // numero del mes => 28\r\n  const month = dt.getMonth(); // indice del mes (0-index) marzo => 2\r\n  const year = dt.getFullYear(); // numero de año => (2021)\r\n\r\n  const [ selectedYear, setSelectedYear ] = useState(year); // numero de año seleccionado\r\n  const [ selectedMonth, setSelectedMonth ] = useState(month); // indice del mes seleccionado\r\n  const [ selectedDate, setSelectedDate ] = useState(currentDay);  // numero de dia seleccionado en el mes\r\n\r\n  const [ display, setDisplay ] = useState('mes');\r\n\r\n  const firstDayOfMonth = new Date(selectedYear, selectedMonth);\r\n  const paddingDays = firstDayOfMonth.getDay(); //\r\n\r\n  const daysInMonth = new Date(selectedYear, selectedMonth + 1, 0).getDate(); // numero de dias del mes\r\n  const dayNumbers = [...Array(paddingDays + daysInMonth).keys()]; // array de numeros desde el 1 hasta el ultimo dia del mes seleccionado\r\n\r\n  const lastDayOfPrevMonth = new Date(selectedYear, selectedMonth, 0).getDate();\r\n\r\n  const changeMonth = (number) => {\r\n    switch (selectedMonth) {\r\n      case 0:\r\n        number === 1 ? setSelectedMonth(1) : setSelectedMonth(11);\r\n        break;\r\n      case 11:\r\n        number === 1 ? setSelectedMonth(0) : setSelectedMonth(10);\r\n        break;\r\n      default:\r\n        setSelectedMonth(selectedMonth + number);\r\n        break;\r\n    }\r\n    // function that when a next or previous button is clicked it changes the current selectedMonth\r\n  }\r\n\r\n  return (\r\n    <DataContext.Provider value={{\r\n      dayNames,\r\n      meses,\r\n      currentDay,\r\n      selectedMonth,\r\n      setSelectedMonth,\r\n      selectedDate,\r\n      setSelectedDate,\r\n      paddingDays,\r\n      daysInMonth,\r\n      dayNumbers,\r\n      lastDayOfPrevMonth,\r\n      changeMonth,\r\n      display,\r\n      setDisplay\r\n    }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\nexport {\r\n  DataContext,\r\n  DataProvider\r\n}\r\n","// import './day.css';\r\nimport React, { useContext, useState} from 'react';\r\nimport { DataContext } from '../Context/DataContext';\r\n\r\nconst Day = (props) => {\r\n\r\n  const { selectedDay, dayNames } = useContext(DataContext)\r\n\r\n  var hora = new Date();\r\n\r\n\r\n  return (\r\n    <div className='day-div'>\r\n      {props.miniatura === true ?\r\n        <div><h1>{props.value}</h1><div>TAREAS</div></div> :\r\n        <div>FECHA: {dayNames[hora.getDay()] + ' ' + hora.getDate()}</div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Day;\r\n","import './month.css';\r\nimport React, { useContext, useState} from 'react';\r\nimport { DataContext } from '../Context/DataContext';\r\nimport Day from '../Day/Day';\r\n\r\nconst Month = () => {\r\n\r\n  const { setSelectedDate, setDisplay, dayNumbers, dayNames, meses, selectedMonth, setSelectedMonth, changeMonth, paddingDays, daysInMonth, currentDay, lastDayOfPrevMonth} = useContext(DataContext);\r\n\r\n  const listOfDayNames = dayNames.map((day, index) =>\r\n    <li\r\n      className='month-li'\r\n      key={index}\r\n      value={day}>\r\n      {day}\r\n    </li>\r\n    );\r\n\r\n  const listOfDayNumbers = dayNumbers.map((num, index) => {\r\n    let dia = index - paddingDays + 1;\r\n    return paddingDays > index ?\r\n      <div\r\n        className='month-day padding'\r\n        key={index}\r\n        onClick={() => {setSelectedDate(lastDayOfPrevMonth  + dia); setDisplay('dia')}}\r\n        >\r\n        <Day value={lastDayOfPrevMonth + dia} miniatura={true} />\r\n      </div> :\r\n      <div\r\n        className='month-day'\r\n        key={index}\r\n        onClick={() => {setSelectedDate(dia); setDisplay('dia')}}>\r\n        <Day value={dia} miniatura={true} />\r\n      </div>\r\n  })\r\n\r\n  return (\r\n    <div className='month-container'>\r\n      <nav className='month-nav'>\r\n        <h1>HOME</h1>\r\n        <button onClick={() => changeMonth(-1)}>{'<'}</button>\r\n        <h1>{meses[selectedMonth]}</h1>\r\n        <button onClick={() => changeMonth(1)}>{'>'}</button>\r\n      </nav>\r\n      <main className='month-main'>\r\n        <ul className='month-ul'>\r\n          {listOfDayNames}\r\n        </ul>\r\n        <div className='month-days-container'>{listOfDayNumbers}</div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Month;\r\n","// import './year.css';\r\nimport React, { useContext, useState} from 'react';\r\nimport { DataContext } from '../Context/DataContext';\r\n\r\nconst Year = () => {\r\n\r\n  return (\r\n    <div>Hello from Year component</div>\r\n  );\r\n}\r\n\r\nexport default Year;\r\n","import React, { useContext } from 'react';\r\n// import { BrowserWeb as Router, Route } from 'react-router-dom';\r\nimport './main.css';\r\nimport { DataContext } from '../Context/DataContext';\r\nimport Day from '../Day/Day';\r\nimport Month from '../Month/Month';\r\nimport Year from '../Year/Year';\r\n\r\nconst Main = () => {\r\n\r\n  const { display, meses, selectedMonth, setSelectedMonth } = useContext(DataContext)\r\n\r\n  const listMeses = meses.map((mes, index) =>\r\n    <div className='month' key={index}>{mes}</div>\r\n   );\r\n\r\n  /*const changeMonth = (action) => {\r\n    console.log(action);\r\n  }*/\r\n//  listMeses.map(div => console.log(div.props.children));\r\n\r\n  return (\r\n    <main  className=\"app-main\">\r\n\r\n      {/*<Router>\r\n        <Route path='/' exact component={Month} />\r\n        <Route path='/day' exact component={Day} />\r\n      </Router>*/}\r\n      {/*  <button className='button home-button' onClick={() => setSelectedMonth([...meses])}>Home</button>\r\n      //  <button className='button next-button' value='next' onClick={() => changeMonth('next')}>Next</button>\r\n      //  <div className='months-container'>{listMeses}</div>*/}\r\n      {display === 'mes' ? <Month /> : display === 'dia' ? <Day /> : <Year />}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main;\r\n","import React, { useContext } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport './nav.css';\r\nimport { DataContext } from '../Context/DataContext';\r\nimport Month from '../Month/Month';\r\n\r\nconst Nav = () => {\r\n\r\n  const { setDisplay, meses, setSelectedMonth } = useContext(DataContext);\r\n\r\n  const listMeses = meses.map((mes, index) =>\r\n    <li\r\n      className='nav-li'\r\n      onClick={() => {\r\n        setSelectedMonth(index);\r\n        setDisplay('mes')\r\n      }}\r\n      key={index}\r\n      value={mes}>\r\n      {mes}\r\n    </li>\r\n    );\r\n  // lista de meses que siempre lleva todos los meses, onclick actualiza el selectedMonths\r\n\r\n  return (\r\n  <nav className='app-nav'>\r\n    <ul className='nav-ul'>\r\n      {listMeses}\r\n    </ul>\r\n  </nav>\r\n)\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport Main from './Main/Main';\nimport Nav from './Nav/Nav';\nimport './App.css';\nimport { DataProvider } from './Context/DataContext';\n\nimport Test from './Test/Dias';\n\nfunction App() {\n\n  return (\n    <div className=\"app-container\">\n      {\n        // <Test />\n      }\n\n      <DataProvider>\n        <Nav />\n        <header className=\"app-header\">2020</header>\n        <Main />\n      </DataProvider>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}