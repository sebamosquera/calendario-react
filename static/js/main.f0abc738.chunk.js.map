{"version":3,"sources":["Context/DataContext.js","Month/Month.js","Main/Main.js","Nav/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["DataContext","createContext","DataProvider","children","meses","useState","selectedMonth","setSelectedMonth","Provider","value","dayNumbers","dayNames","changeMonth","number","currentMonth","indexOf","Month","useContext","listOfDays","map","day","index","className","listOfWeeks","dia","onClick","e","console","log","target","attributes","Main","mes","Nav","listMeses","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0abc738.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nconst DataContext = createContext({});\r\n\r\nconst DataProvider = ({children}) => {\r\n\r\n  const dayNumbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\r\n\r\n  const dayNames = ['LUNES', 'MARTES', 'MIERCOLES', 'JUEVES',\r\n   'VIERNES', 'SABADO', 'DOMINGO']\r\n\r\n  const meses = ['ENERO', 'FEBRERO', 'MARZO',\r\n   'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO',\r\n   'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];\r\n\r\n  const [ selectedMonth, setSelectedMonth ] = useState(meses[0]);\r\n  // selectedMonth se inicia con todos los meses\r\n  const [ selectedDay, setSelectedDay ] = useState(1);\r\n  // selectedDay se inicia con el dia actual\r\n\r\n  const changeMonth = (number) => {\r\n    let currentMonth = meses.indexOf(selectedMonth);\r\n    switch (currentMonth) {\r\n      case 0:\r\n        number === 1 ? setSelectedMonth(meses[1]) : setSelectedMonth(meses[11]);\r\n        break;\r\n      case 11:\r\n        number === 1 ? setSelectedMonth(meses[0]) : setSelectedMonth(meses[10]);\r\n        break;\r\n      default:\r\n        setSelectedMonth(meses[currentMonth + number]);\r\n        break;\r\n    }\r\n    // function that when a next or previous button is clicked it changes the current selectedMonth\r\n  }\r\n\r\n  return (\r\n    <DataContext.Provider value={{\r\n      dayNumbers,\r\n      dayNames,\r\n      meses,\r\n      selectedMonth,\r\n      setSelectedMonth,\r\n      changeMonth\r\n    }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\nexport {\r\n  DataContext,\r\n  DataProvider\r\n}\r\n","import './month.css';\r\nimport React, { useContext, useState} from 'react';\r\nimport { DataContext } from '../Context/DataContext';\r\n\r\nconst Month = () => {\r\n\r\n  const { dayNumbers, dayNames, meses, selectedMonth, setSelectedMonth, changeMonth } = useContext(DataContext);\r\n\r\n  const listOfDays = dayNames.map((day, index) =>\r\n    <li\r\n      className='month-li'\r\n      key={index}\r\n      value={day}>\r\n      {day}\r\n    </li>\r\n    );\r\n\r\n  const listOfWeeks = dayNumbers.map((dia, index) =>\r\n    <div\r\n      className='month-day'\r\n      key={index}\r\n      value={dia}\r\n      onClick={(e) => console.log(e.target.attributes.value.value, selectedMonth)}>\r\n      {dia}\r\n    </div>\r\n   );\r\n\r\n  return (\r\n    <div className='month-container'>\r\n      <nav className='month-nav'>\r\n        <button onClick={() => changeMonth(-1)}>{'<'}</button>\r\n        <h1>{selectedMonth}</h1>\r\n        <button onClick={() => changeMonth(1)}>{'>'}</button>\r\n      </nav>\r\n      <main className='month-main'>\r\n        <ul className='month-ul'>\r\n          {listOfDays}\r\n        </ul>\r\n        <div className='month-days-container'>{listOfWeeks}</div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Month;\r\n","import React, { useContext } from 'react';\r\nimport './main.css';\r\nimport { DataContext } from '../Context/DataContext';\r\nimport Month from '../Month/Month';\r\n\r\nconst Main = () => {\r\n\r\n  const { meses, selectedMonth, setSelectedMonth } = useContext(DataContext)\r\n\r\n  const listMeses = meses.map((mes, index) =>\r\n    <div className='month' key={index}>{mes}</div>\r\n   );\r\n\r\n  /*const changeMonth = (action) => {\r\n    console.log(action);\r\n  }*/\r\n\r\n//  listMeses.map(div => console.log(div.props.children));\r\n\r\n  return (\r\n    <main  className=\"app-main\">\r\n    {/*  <button className='button home-button' onClick={() => setSelectedMonth([...meses])}>Home</button>\r\n    //  <button className='button next-button' value='next' onClick={() => changeMonth('next')}>Next</button>\r\n    //  <div className='months-container'>{listMeses}</div>*/}\r\n      <Month />\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main;\r\n","import React, { useContext } from 'react';\r\nimport './nav.css';\r\nimport { DataContext } from '../Context/DataContext';\r\nimport Month from '../Month/Month';\r\n\r\nconst Nav = () => {\r\n\r\n  const { meses, setSelectedMonth } = useContext(DataContext);\r\n\r\n  const listMeses = meses.map((mes, index) =>\r\n    <li\r\n      className='nav-li'\r\n      onClick={() => {setSelectedMonth(mes);}}\r\n      key={index}\r\n      value={mes}>\r\n      {mes}\r\n    </li>\r\n    );\r\n  // lista de meses que siempre lleva todos los meses, onclick actualiza el selectedMonths\r\n\r\n\r\n  return (\r\n  <nav className='app-nav'>\r\n    <ul className='nav-ul'>\r\n      {listMeses}\r\n    </ul>\r\n  </nav>\r\n)\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport Main from './Main/Main';\nimport Nav from './Nav/Nav';\nimport './App.css';\nimport { DataProvider } from './Context/DataContext';\n\nfunction App() {\n\n  return (\n    <div className=\"app-container\">\n      <DataProvider>\n        <Nav />\n        <header className=\"app-header\">2020</header>\n        <Main />\n      </DataProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}